The uint data type is an unsigned integer, meaning its value must be non-negative. There's also an int data type for signed integers.

In Solidity, uint is actually an alias for uint256, a 256-bit unsigned integer. You can declare uints with less bits — uint8, uint16, uint32, etc..
But in general you want to simply use uint except in specific cases, which we'll talk about in later lessons.

uint x = 5 ** 2; // equal to 5^2 = 25

Strings are used for arbitrary-length UTF-8 data.
uint is an alias for uint256 — they're the same thing.

// Array with a fixed length of 2 elements:
uint[2] fixedArray;
// another fixed Array, can contain 5 strings:
string[5] stringArray;
// a dynamic Array - has no fixed size, can keep growing:
uint[] dynamicArray;

You can also create an array of structs. Using the previous chapter's Person struct:
Person[] people;

You can declare an array as public, and Solidity will automatically create a getter method for it. The syntax looks like:
Person[] public people;
Other contracts would then be able to read from, but not write to, this array. So this is a useful pattern for storing public data in your contract.

Reference Type in Solidity:
By value, which means that the Solidity compiler creates a new copy of the parameter's value and passes it to your function. This allows your 
function to modify the value without worrying that the value of the initial parameter gets changed.
By reference, which means that your function is called with a... reference to the original variable. Thus, if your function changes the value of 
the variable it receives, the value of the original variable gets changed.

It's convention (but not required) to start function parameter variable names with an underscore (_) in order to differentiate them from global 
variables.

array.push() adds something to the end of the array.

Only other functions within our contract will be able to call a private function

It's convention to start private function names with an underscore (_).

In Solidity, the function declaration contains the type of the return value.

 it doesn't change any values or write anything.

VIEW function, meaning it's only viewing the data but not modifying it:
function sayHello() public view returns (string memory) { }

Solidity also contains pure functions, which means you're not even accessing any data in the app:
function _multiply(uint a, uint b) private pure returns (uint) {
  return a * b;
}
This function doesn't even read from the state of the app — its return value depends only on its function parameters. 
So in this case we would declare the function as PURE.

Typecasting:
uint8 a = 5;
uint b = 6;
// throws an error because a * b returns a uint, not uint8:
uint8 c = a * b; 
// we have to typecast b as a uint8 to make it work:
uint8 c = a * uint8(b); 
In the above, a * b returns a uint, but we were trying to store it as a uint8, which could cause potential problems. By casting it as a uint8, it 
works and the compiler won't throw an error.

keccak256 expects a single parameter of type bytes. This means that we have to "pack" any parameters before calling keccak256:
keccak256(abi.encodePacked("aaaab"));

An address is owned by a specific user (or a smart contract).

// For a financial app, storing a uint that holds the user's account balance:
mapping (address => uint) public accountBalance;
// Or could be used to store / lookup usernames based on userId
mapping (uint => string) userIdToName;
A mapping is essentially a key-value store for storing and looking up data. In the first example, the key is an address and the value is a uint, 
and in the second example the key is a uint and the value a string.

"msg.sender" : which refers to the address of the person (or smart contract) who called the current function.

Solidity doesn't have native string comparison, so we compare their keccak256 hashes to see if the strings are equal.

"require" is quite useful for verifying certain conditions that must be true before running a function.

contract BabyDoge is Doge {.....} :
"BabyDoge" inherits from "Doge". That means if you compile and deploy BabyDoge, it will have access to both catchphrase() (in "doge") and 
anotherCatchphrase()(in "BabyDoge") and any other public functions we may define on Doge.

You want to import one file into another, Solidity uses the import keyword:
import "./someothercontract.sol";

Storage refers to variables stored permanently on the blockchain. Memory variables are temporary, and are erased between external function calls to 
your contract.
State variables (variables declared outside of functions) are by default storage and written permanently to the blockchain, while variables declared 
inside functions are memory and will disappear when the function call ends.

Solidity has two more types of visibility for functions: internal and external.
"internal" is the same as private, except that it's also accessible to contracts that inherit from this contract.
"external" is similar to public, except that these functions can ONLY be called outside the contract — they can't be called by other functions inside 
that contract.

Simply ending the function declaration with a semi-colon (;).
So it kind of looks like a contract skeleton. This is how the compiler knows it's an interface.
By including this interface in our dapp's code our contract knows what the other contract's functions look like, how to call them, and what sort of 
response to expect.

Ex: function _isReady(Zombie storage _zombie) internal view returns (bool) {
      return (_zombie.readyTime <= now);
}
In Solidity you can return more than one value from a function.

After you deploy a contract to Ethereum, it’s immutable, which means that it can never be modified or updated again.

You would have to tell your users to start using a different smart contract address that has the fixed error (if any).

Makes sense to have functions that will allow you to update key portions of the DApp.

The Ownable contract basically does the following:
When a contract is created, its constructor sets the owner to msg.sender (the person who deployed it).
It adds an onlyOwner modifier, which can restrict access to certain functions to only the owner.
It allows you to transfer the contract to a new owner.

Attach the modifier's name at the end of a function definition to change that function's behavior.

Giving the owner special powers over the contract like this is often necessary, but it could also be used maliciously. For example, the owner could 
add a backdoor function etc. There's a careful balance as a developer between maintaining control over a DApp such that you can fix potential bugs, 
and building an owner-less platform that your users can trust to secure their data.

Each individual operation has a gas cost based roughly on how much computing resources will be required. How much gas is required to execute a 
function depends on how complex that function's logic is. When you execute a function, every single node on the network needs to run that same 
function to verify its output The creators of Ethereum wanted to make sure someone couldn't clog up the network with an infinite loop, or hog all the
network resources with really intensive computations. So they made it so transactions aren't free.

Solidity reserves 256 bits of storage regardless of the uint size. For example, using uint8 instead of uint (uint256) won't save you any gas.
If you have multiple uints inside a struct, using a smaller-sized uint when possible will allow Solidity to pack these variables together to take up 
less storage. a struct with fields uint c; uint32 a; uint32 b; will cost less gas than a struct with fields uint32 a; uint c; uint32 b; because the 
uint32 fields are clustered together.

Unix time is traditionally stored in a 32-bit number. This will lead to the "Year 2038" problem, when 32-bit unix timestamps will overflow and break 
a lot of legacy systems. So if we wanted our DApp to keep running 20 years from now, we could use a 64-bit number instead — but our users would have 
to spend more gas to use our DApp in the meantime.
"now" returns a uint256 by default.

You can pass a storage pointer of a struct as an argument to a private or internal function. Ex:
function _doStuff(Zombie storage _zombie) internal {
  // do stuff with _zombie
} where Zombie is the structure name and _zombie is the name if the storage pointer.

"calldata" is somehow similar to memory, but it's only available to external functions.

"view" functions don't cost any gas when they're called externally by a user.
Only needs to query your local Ethereum node to run the function, and it doesn't actually have to create a transaction on the blockchain (which would 
need to be run on every single node, and cost gas).
If a view function is called internally from another function in the same contract that is not a view function, it will still cost gas. This is 
because the other function creates a transaction on Ethereum, and will still need to be verified from every node. So view functions are only free 
when they're called externally.

Avoid writing data to storage except when absolutely necessary.

Instantiate a new array in memory with a length of 3:
  uint[] memory values = new uint[](3);

Syntax of for loops in Solidity is similar to JavaScript:
for (uint i = 1; i <= 10; i++) {........}

payable functions : they are a special type of function that can receive Ether.
"msg.value" is a way to see how much Ether was sent to the contract, and ether is a built-in unit.
If a function is not marked payable and you try to send Ether to it as above, the function will reject your transaction.

After you send Ether to a contract, it gets stored in the contract's Ethereum account, and it will be trapped there — unless you add a function to 
withdraw the Ether from the contract.
"_owner" variable has to be a "address payable" type for doing a sending and transferring ether instruction.
Casting any integer type like uint160 to address produces an address payable. 
Ex: address payable _owner = address(uint160(owner()));

_owner.transfer(address(this).balance);
In place of owner , you can write any address who you want to send the ethers stored in the contract.

Random number generation is NOT secure on Ethereum.

A token is just a contract that keeps track of who owns how much of that token, and some functions so those users can transfer their tokens to other
addresses.

ERC721 tokens are not interchangeable since each one is assumed to be unique, and are not divisible. You can only trade them in whole units, and each
one has a unique ID. We're using the ERC721 token standard, which means other contracts will expect our contract to have functions with the exact 
names defined. 

Luckily in Solidity, your contract can inherit from multiple contracts as follows:
contract SatoshiNakamoto is NickSzabo, HalFinney {............}

You can't have a modifier and a function with the same name.

Note that the ERC721 spec has 2 different ways to transfer tokens:
function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
and
function approve(address _approved, uint256 _tokenId) external payable;
function transferFrom(address _from, address _to, uint256 _tokenId) external payable;

The first way is the token's owner calls transferFrom with his address as the _from parameter, the address he wants to transfer to as the _to 
paramater, and the _tokenId of the token he wants to transfer.
The second way is the token's owner first calls approve with the address he wants to transfer to, and the _tokenID . The contract then stores who is 
approved to take a token, usually in a mapping (uint256 => address). Then, when the owner or the approved address calls transferFrom, the contract 
checks if that msg.sender is the owner or is approved by the owner to take the token, and if so it transfers the token to him.

Make sure users don't accidentally transfer their collectibles to address 0 (which is called "burning" a token — basically it's sent to an address 
that no one has the private key of, essentially making it unrecoverable).

uint8, which can only have 8 bits. That means the largest number we can store is binary 11111111 (or in decimal, 2^8 - 1 = 255).
Take a look at the following code. What is number equal to at the end?
uint8 number = 255;
number++;
In this case, we've caused it to overflow — so number is counterintuitively now equal to 0 even though we increased it.

A library is a special type of contract in Solidity. One of the things it is useful for is to attach functions to native data types.
For example, with the SafeMath library, we'll use the syntax using SafeMath for uint256. The SafeMath library has 4 functions — add, sub, mul, and 
div. And now we can access these functions from uint256 as follows:
using SafeMath for uint256;
uint256 a = 5;
uint256 b = a.add(3); // 5 + 3 = 8
uint256 c = a.mul(2); // 5 * 2 = 10
OR
myUint = myUint.add(1); //For 1 value increment

Function in SafeMath:
function add(uint256 a, uint256 b) internal pure returns (uint256) {
  uint256 c = a + b;
  assert(c >= a);
  return c;
}
Basically add just adds 2 uints like +, but it also contains an assert statement to make sure the sum is greater than a. This protects us from 
overflows.

The difference between assert and require is that require will refund the user the rest of their gas when a function fails, whereas assert will not. 
So most of the time you want to use require in your code; assert is typically used when something has gone horribly wrong with the code (like a uint
overflow).

To prevent overflow/underflows with our uint16s and uint32s. We can call them SafeMath16 and SafeMath32:
(Declaration)
using SafeMath for uint32;
using SafeMath for uint16;

@title and @author are straightforward.
@notice explains to a user what the contract / function does. 
@dev is for explaining extra details to developers.
@param and @return are for describing what each parameter and return value of a function are for.
All tags are optional. But at the very least, leave a @dev note explaining what each function does.

Ethereum network is made up of nodes, with each containing a copy of the blockchain.

Depending on your project's workflow, you can add Web3.js to your project using most package tools:
// Using NPM
npm install web3
// Using Yarn
yarn add web3
// Using Bower
bower install web3
// ...etc.
Or you can simply download the minified .js file from github and include it in your project:
<script language="javascript" type="text/javascript" src="web3.min.js"></script>

Using Infura as a provider, you can reliably send and receive messages to/from the Ethereum blockchain without needing to set up and maintain your 
own node.

Metamask is a browser extension for Chrome and Firefox that lets users securely manage their Ethereum accounts and private keys, and use these 
accounts to interact with websites that are using Web3.js.

all (private key management programs like Metamask, Mist etc.) implement a common pattern of injecting the variable web3, so the method we describe 
here for detecting the user's web3 provider will work for these as well.

Web3.js will need 2 things to talk to your contract: its address and its ABI.

ABI stands for Application Binary Interface. Basically it's a representation of your contracts' methods in JSON format that tells Web3.js how to form
at function calls in a way your contract will understand.

"call" is used for view and pure functions. It only runs on the local node, and won't create a transaction on the blockchain.
"send" will create a transaction and change data on the blockchain. You'll need to use send for any functions that aren't view or pure.
cryptoZombies = new web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);
cryptoZombies.methods.myMethod(123).call() AND cryptoZombies.methods.myMethod(123).send()

cryptoZombies.methods.zombies(id).call() will communicate with the Web3 provider node and tell it to return the zombie with index id from Zombie[] 
public zombies on our contract.
Note: this is asynchronous, like an API call to an external server. So Web3 returns a promise here.
Once the promise resolves (which means we got an answer back from the web3 provider), our example code saves it in the variable result, which 
further console.log(result).

MetaMask allows the user to manage multiple accounts in their extension. We can see which account is currently active on the injected web3 variable:
var userAccount = web3.eth.accounts[0]

var accountInterval = setInterval(function() {
  // Check if account has changed
  if (web3.eth.accounts[0] !== userAccount) {
    userAccount = web3.eth.accounts[0];
    // Call some function to update the UI with the new account
    updateInterface();
  }
}, 100);
What this does is check every 100 milliseconds to see if userAccount is still equal web3.eth.accounts[0] (i.e. does the user still have that account 
active). If not, it reassigns userAccount to the currently active account, and calls a function to update the display.

SENDing a transaction requires a from address of who's calling the function (which becomes msg.sender in your Solidity code).
SENDing a transaction costs gas.
There will be a significant delay from when the user sends a transaction and when that transaction actually takes effect on the blockchain. This is 
because we have to wait for the transaction to be included in a block, and the block time for Ethereum is on average 15 seconds. If there are a lot 
of pending transactions on Ethereum or if the user sends too low of a gas price, our transaction may have to wait several blocks to get included, and
this could take minutes.

The way to send Ether along with a function is simple. We need to specify how much to send in wei, not Ether.
A wei is the smallest sub-unit of Ether — there are 10^18 wei in one ether.
web3js.utils.toWei("1");
We can make the user send 0.001 Ether along with it using the following code:
cryptoZombies.methods.levelUp(zombieId)
.send({ from: userAccount, value: web3js.utils.toWei("0.001", "ether") })

In order to filter events and only listen for changes related to the current user, our Solidity contract would have to use the indexed keyword.

We can even query past events using getPastEvents, and use the filters fromBlock and toBlock to give Solidity a time range for the event logs("block"
in this case referring to the Ethereum block number)
The tradeoff here is that events are not readable from inside the smart contract itself, only from the app's front-end (useful).